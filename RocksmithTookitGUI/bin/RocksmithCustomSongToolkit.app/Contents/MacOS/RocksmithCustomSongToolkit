#!/bin/sh
#
# This is a stub script that allows .apps to be relocatable on OSX but still
# find the managed assembly. (macpack from mono package)
#
# You should never have to edit this file directly as its generated by the
# bundle maker.
#

# Set mode to Windows Forms
MWF_MODE=1

PWD=$(pwd)

# Fetch the .app bundle path. (cd .. [x3] from cmd script) awk so slow...
# Don't use "$0" for this it's break the code somehow, but there should be no harm in theory.... 
APP_PATH=`echo $0 | awk '{split($0,patharr,"/"); idx=1; while(patharr[idx+3] != "") { if (patharr[idx] != "/") {printf("%s/", patharr[idx]); idx++ }} }'`

# Fetch the app name (its our own name)
CMD_NAME=$(basename "$0")
ASSEMBLY="$CMD_NAME.exe"

# Mono version check
REQUIRED_MAJOR=3
REQUIRED_MINOR=0
NEW_OSX_MSG=""

# Workaround for new macxOS
# Create /usr/local/bin  since it didn't actually exist, sudo mkdir /usr/local/bin
# Then change the permissions for /usr/local, sudo chmod 777 /usr/local
MAC_VERSION_MINOR=$(sw_vers -productVersion | cut -f2 -d.)
if [ $MAC_VERSION_MINOR -gt 11 ]; then
	export PATH=/usr/local/bin:${PATH}
	NEW_OSX_MSG="It seems that you've got El Capitan, if you've got issues with mono, read this: http://git.io/vCBjz"
fi

VERSION_TITLE="Cannot launch $CMD_NAME"
DOWNLOAD_URL="http://www.mono-project.com/download/"

# Try to find system default Mono if an override was not supplied
if [ "z${MONO_BIN}" = "z" ]; then
	MONO_BIN=$(which mono)

	# If the result is broken, don't use it
	if [ ! -f "${MONO_BIN}" ]; then
		MONO_BIN=""
	fi

	# Check if there was no Mono found
	if [ "z${MONO_BIN}" = "z" ]; then
		# Check if there is a HomeBrew install of Mono
		if [ -f "/usr/local/bin/mono" ]; then
			MONO_BIN="/usr/local/bin/mono"

		# Check if there is a system version of Mono
		elif [ -f "/Library/Frameworks/Mono.framework/Versions/Current/Commands/mono" ]; then
			MONO_BIN="/Library/Frameworks/Mono.framework/Versions/Current/Commands/mono"

		# Set up some default that will likely fail
		else
			MONO_BIN="mono"

		fi
	fi
fi


MONO_VERSION=$(${MONO_BIN} --version | grep 'Mono JIT compiler version ' |  cut -f5 -d\ )
MONO_VERSION_MAJOR=$(echo $MONO_VERSION | cut -f1 -d.)
MONO_VERSION_MINOR=$(echo $MONO_VERSION | cut -f2 -d.)
MONO_VERSION_MET="Current Mono version: v$MONO_VERSION"

if [ -z "$MONO_VERSION" ] \
	|| [ $MONO_VERSION_MAJOR -lt $REQUIRED_MAJOR ] \
	|| [ $MONO_VERSION_MAJOR -eq $REQUIRED_MAJOR ] && [ $MONO_VERSION_MINOR -lt $REQUIRED_MINOR ];
then
	MONO_VERSION_MET="Mono Framework is not installed. (or too old)"
	VERSION_MSG="$CMD_NAME requires the Mono Framework version $REQUIRED_MAJOR.$REQUIRED_MINOR or later. $MONO_VERSION_MET"
	osascript \
	-e "set question to display dialog \"$VERSION_MSG\" with title \"$VERSION_TITLE\" buttons {\"Cancel\", \"Download...\"} default button 2" \
	-e "if button returned of question is equal to \"Download...\" then open location \"$DOWNLOAD_URL\""
	-e "display dialog \"$NEW_OSX_MSG\""
	echo "$VERSION_TITLE"
	echo "$VERSION_MSG"
	exit 1
fi

# Setup the environment for MWF if needed
if [ "$MWF_MODE" -eq "1" ]; then
	# export MONO_MWF_USE_CARBON_BACKEND=1
	export GDIPLUS_NOX=1
	export MONO_IOMAP=all
fi

# ensure we've got wine before use it
WINE_VERSION=$(wine --version | grep 'wine-' | cut -f1 -d.)
if [ -z "$WINE_VERSION" ]; then
	export WINE_INSTALLED=0
else
	export WINE_INSTALLED=1
fi

echo "$MONO_VERSION_MET"
echo "$WINE_VERSION"
echo “$APP_PATH”
cd "$APP_PATH/Contents/Resources" || exit

#Finally launch the APP
${MONO_BIN} --optimize=sse2,simd,loop,inline "$ASSEMBLY"

